Para usar la terminal y mientras usar la pagina del browser podemos hacer:

fossil ui &

O bien:
fossil ui + control z pero eso lo duemre luego no podremos pinchar en la pagiina se queda parada si hacemos bg(background) seguira y si hacemos fg volverá a no dejarnos meter mas comandos

Debemos borrar todos los lenguajes que no usemos:
fossil update

ls -la
fossil rm hw.awk (aun no desaparece)
fossil commit -m "lo que sea"
y luego rm hw.awk 
y ahora si hacemos fossil update ya no aparece

Como recuperamos el archivo ahora¿?

volver a la versión donde estaba el fichero (lo vemos un número en la página web)
copiamos el numero de identificación

fossil update identificador --> is back, siempre puedes volver atrás se queda en el control de versiones

Y si hacemos fossil update volveremos a no tener el fichero pq no lo hemos guardado

Para añadir fossil add ./remove

Proceso creacion y subida a fossil:
vi fichero
fossil add sergio
fossil commit -m "lo que sea"

fossil sync (push + pull)
siempre hacerr fossil update por si sergio o yo hemos actualizado algo
mirar fossil mv

Apuntes: 21/2/2018
También se usan las 3 comillas para comentar siempre que queramos realizar una explicacion en distintas lineas--> docstrings
Las funciones puedes ser referenciadas, def juan(): print("juan")
                                        leer = juan
                                        print("leer") # y mostrará el contenido de la función juan
Las funciones pueden usarse como argumentos de otras funciones
Usar librerias:
        import random #libreria
        for i in range(5):
           value = random.randint(1, 6)
           print(value)

Modules
---------
There is another kind of import that can be used if you only need certain functions from a module.
These take the form from module_name import var, and then var can be used as if it were defined normally in your code. 
For example, to import only the pi constant from the math module:
from math import pi
print(pi)

tambien se puede usar --> from math import pi, sqrt

You can import a module or object under a different name using the as keyword. This is mainly used when a module or object has a long or confusing name.
For example:
from math import sqrt as square_root
print(square_root(100))

Many third-party Python modules are stored on the Python Package Index (PyPI). 
The best way to install these is using a program called pip. This comes installed by default with modern distributions of Python. If you don't have it, it is easy to install online. Once you have it, installing libraries from PyPI is easy. Look up the name of the library you want to install, go to the command line (for Windows it will be the Command Prompt), and enter pip install library_name. Once you've done this, import the library and use it in your code.

Using pip is the standard way of installing libraries on most operating systems, but some 
libraries have prebuilt binaries for Windows. These are normal executable files that let you install libraries with a GUI
the same way you would install other programs.
 
